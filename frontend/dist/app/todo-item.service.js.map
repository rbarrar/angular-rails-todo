{"version":3,"file":"todo-item.service.js","sourceRoot":"","sources":["../Users/ryanbarrar/Documents/todo-angular/frontend/tmp/broccoli_type_script_compiler-input_base_path-IvBWIVP7.tmp/0/src/app/todo-item.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TodoItemComponent } from './todo-item/';\nimport { Headers, Http } from '@angular/http';\nimport { TodoItem } from './models/todo_item';\n\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class TodoItemsService {\n  private todo_itemsUrl = 'api/todo_items';\n  constructor(private http: Http) { };\n\n  getTodoItems(): Promise<TodoItem[]> {\n    return this.http.get(this.todo_itemsUrl)\n               .toPromise()\n               .then(response => response.json())\n               .catch(this.handleError);\n  }\n\n  getTodoItem(id: number) {\n    return this.getTodoItems()\n      .then(todo_items => todo_items.filter(todo_item => todo_item.id === id)[0]);\n  }\n\n  save(todo_item: TodoItem): Promise<TodoItem> {\n      if (todo_item.id) {\n        return this.put(todo_item);\n      } else {\n        return this.post(todo_item);\n      }\n    }\n\n    delete(todo_item: TodoItem) {\n       let headers = new Headers();\n       headers.append('Content-Type', 'application/json');\n\n       let url = `${this.todo_itemsUrl}/${todo_item.id}`;\n\n       return this.http\n         .delete(url, headers)\n         .toPromise()\n         .catch(this.handleError);\n     }\n\n\n    // Add new Todo\n  private post(todo_item: TodoItem): Promise<TodoItem> {\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post(this.todo_itemsUrl, JSON.stringify(todo_item), { headers: headers })\n      .toPromise()\n      .then(res => res.json())\n      .catch(this.handleError);\n  }\n\n  // Update existing Todo\n private put(todo_item: TodoItem) {\n   let headers = new Headers();\n   headers.append('Content-Type', 'application/json');\n\n   let url = `${this.todo_itemsUrl}/${todo_item.id}`;\n\n   return this.http\n     .put(url, JSON.stringify(todo_item), { headers: headers })\n     .toPromise()\n     .then(() => todo_item)\n     .catch(this.handleError);\n }\n\n\n  private handleError(error: any) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n"]}